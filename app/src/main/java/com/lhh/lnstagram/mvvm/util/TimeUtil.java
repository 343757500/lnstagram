package com.lhh.lnstagram.mvvm.util;import static java.lang.String.format;import android.annotation.SuppressLint;import android.text.TextUtils;import com.lhh.lnstagram.R;import com.lhh.lnstagram.base.BaseApplication;import java.text.DateFormat;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import java.util.Formatter;import java.util.Locale;import java.util.TimeZone;import guide.util.StringUtil;public class TimeUtil {    public static final String YY_MM_DD = "yy/MM/dd";    public static final String MM_YYYY = "MM/yyyy";    public static final String YYYY_MM_DD = "yyyy-MM-dd";    public static final String YYYY_MM_DD_HH_MM = "yyyy-MM-dd HH:mm";    public static final String YYYY_MM_DD_HH_MM_SS = "yyyy-MM-dd HH:mm:ss";    public static final String MM_DD_YYYY = "MM-dd-yyyy";    public static final String MM_DD_YYYY_HH_MM = "MM-dd-yyyy HH:mm";    public static final String MM_DD_YYYY_HH_MM_SS = "MM-dd-yyyy HH:mm:ss";    public static final String HH_MM = "HH:mm";    public static final String FORMAT_DD_MM_YYYY = "dd/MM/yyyy";    public static final String FORMAT_DD_MM_YYYY_HH_MM = "dd/MM/yyyy HH:mm";    public static final String FORMAT_MM_DD_YYYY = "MM/dd/yyyy";    public static final String FORMAT_MM_DD_YYYY_HH_MM = "MM/dd/yyyy HH:mm";    public static final String FORMAT_SS_DD_MM_YYYY_HH_MM = "MM/dd/yyyy HH:mm:ss";    public static final String VIDEO_YYYY_MM_DD_HH_MM_SS = "yyyy-MM-dd_HH:mm:ss";    public static final String MM_SS = "mm:ss";    /**************     *     *  获取当前时间     *     *************/    public static long differTime = 0;    // 设置本地和服务器的时间差（秒）    public static void setDifferTime(long serviceTime) {        if (serviceTime > 0) {            // 比服务器时间早多少秒            differTime = System.currentTimeMillis() / 1000L - serviceTime;        }    }    // 获取时间戳(本地或服务器)    private static long getCurrentTime(long differTime) {        return (System.currentTimeMillis() / 1000L) - differTime;    }    /**     * 获取当前时间（本机）     *     * @return 秒     */    public static long getCurrentTime4Local() {        return getCurrentTime(0);    }    /**     * 获取当前时间（本机）     *     * @return 秒     */    public static String getCurrentTimeStr4Local() {        return String.valueOf(getCurrentTime4Local());    }    /**     * 获取当前时间（对比Tcp服务器）     *     * @return 秒     */    public static long getCurrentTime4Service() {        return getCurrentTime(differTime);    }    /**     * 获取当前时间（对比Tcp服务器）     *     * @return 秒     */    public static String getCurrentTimeStr4Service() {        return String.valueOf(getCurrentTime4Service());    }    /**************     *     *    格式化     *     *************/    public static final String formatLong2Short(long time) {        return format(time + "", MM_DD_YYYY);    }    // 聊天在线时间    public static String formatChatOnlineTime(String time) {        try {            long longTime = Long.valueOf(time);            if (longTime <= 0) {                return "";            }            long currentTime = getCurrentTime4Service();            long gap = (currentTime - longTime) / 60; //分钟            if (gap <= 0) {                return "";            }            if (gap < 1) {                return StringUtil.getString(R.string.common_last_second, (currentTime - longTime));            }            if (gap < 60) {                return StringUtil.getString(R.string.common_last_minute, gap);            }            gap = gap / 60;//小时            if (gap < 23) {                return StringUtil.getString(R.string.common_last_hours, gap);            }            if (gap < 48) {                return StringUtil.getString(R.string.common_last_yesterday, format(time, HH_MM));            }            return StringUtil.getString(R.string.common_last_day, gap / 24, format(time, HH_MM));        } catch (Exception e) {            return "";        }    }    // 聊天列表和详情的时间    public static String formatChatTime4ListOrDetail(String timeStr, boolean isList) {        try {            long timeMillis = Long.valueOf(timeStr) * 1000L;            if (timeMillis == 0) {                return "";            }            Calendar todayCalendar = Calendar.getInstance();            todayCalendar.set(Calendar.HOUR_OF_DAY, 0);            todayCalendar.set(Calendar.MINUTE, 0);            todayCalendar.set(Calendar.MILLISECOND, 0);            // 今天            long todayMillis = todayCalendar.getTimeInMillis();            if (timeMillis >= todayMillis) {                if (isList) {                    // 02:14                    return format(timeStr, HH_MM);                } else {                    // Today 02:14                    return StringUtil.getString(R.string.common_today) + " " + format(timeStr, HH_MM);                }            }            // 昨天            long yesterdayMillis = todayMillis - 24 * 60 * 60 * 1000;            if (timeMillis >= yesterdayMillis) {                if (isList) {                    // Yesterday                    return StringUtil.getString(R.string.common_yesterday);                } else {                    // Yesterday 12:00                    return StringUtil.getString(R.string.common_yesterday) + " " + format(timeStr, HH_MM);                }            }            // 前天            if (isList) {                // 27/04/2019                return format(timeStr, FORMAT_MM_DD_YYYY);            } else {                // 27/04/2019 12:00                return format(timeStr, FORMAT_MM_DD_YYYY_HH_MM);            }        } catch (Exception e) {            return "";        }    }    // 聊天详情Item的时间    public static String formatChatItemTime(String time) {        return format(time, HH_MM);    }    // 聊天界面中间时间    public static String formatChatCenterTime(String timeStr) {        try {            long timeMillis = Long.valueOf(timeStr) * 1000L;            if (timeMillis == 0) {                return "";            }            Calendar todayCalendar = Calendar.getInstance();            todayCalendar.set(Calendar.HOUR_OF_DAY, 0);            todayCalendar.set(Calendar.MINUTE, 0);            todayCalendar.set(Calendar.MILLISECOND, 0);            long todayMillis = todayCalendar.getTimeInMillis();            if (timeMillis >= todayMillis) {                return StringUtil.getString(R.string.common_today);            }            //昨天            long yesterdayMillis = todayMillis - 24 * 60 * 60 * 1000;            if (timeMillis >= yesterdayMillis) {                return StringUtil.getString(R.string.common_yesterday);            }            return format(timeStr, YY_MM_DD);        } catch (Exception e) {            return "";        }    }    public static String getMouthYearTime(String time) {        try {            long longTime = Long.valueOf(time) * 1000L;            Calendar calendar = Calendar.getInstance();            calendar.setTimeInMillis(longTime);            return getMonthStr(calendar.get(Calendar.MONTH)) + calendar.get(Calendar.YEAR);        } catch (Exception e) {            return "";        }    }    public static String getMouthYearTime2(String time) {        try {            long longTime = Long.valueOf(time) * 1000L;            SimpleDateFormat dateFormat = new SimpleDateFormat(MM_YYYY);            return dateFormat.format(new Date(longTime));        } catch (Exception e) {            return "";        }    }    public static String getMonthStr(int month) {        switch (month) {            case 0:                return StringUtil.getString(R.string.common_month_jan);            case 1:                return StringUtil.getString(R.string.common_month_feb);            case 2:                return StringUtil.getString(R.string.common_month_mar);            case 3:                return StringUtil.getString(R.string.common_month_apr);            case 4:                return StringUtil.getString(R.string.common_month_may);            case 5:                return StringUtil.getString(R.string.common_month_jun);            case 6:                return StringUtil.getString(R.string.common_month_jul);            case 7:                return StringUtil.getString(R.string.common_month_aug);            case 8:                return StringUtil.getString(R.string.common_month_sept);            case 9:                return StringUtil.getString(R.string.common_month_oct);            case 10:                return StringUtil.getString(R.string.common_month_nov);            case 11:                return StringUtil.getString(R.string.common_month_dec);            default:                return "";        }    }    public static long getMonthTimeMillis(int year, int month) {        try {            DateFormat df = new SimpleDateFormat("yyyy-MM-dd");            df.setTimeZone(TimeZone.getTimeZone("UTC"));            Date date = df.parse(year + "-" + (month + 1) + "-01");            Calendar cal = Calendar.getInstance();            cal.setTime(date);            return cal.getTimeInMillis() / 1000;        } catch (Exception e) {        }        return 0;    }    /**     * 日期格式字符串转换成时间戳     *     * @param dateStr 字符串日期     * @param format  如：yyyy-MM-dd HH:mm:ss     * @return     */    @SuppressLint("SimpleDateFormat")    public static String date2TimeStamp(String dateStr, String format) {        try {            SimpleDateFormat sdf = new SimpleDateFormat(YYYY_MM_DD_HH_MM);            return format(sdf.parse(dateStr).getTime() / 1000L + "", TimeUtil.YYYY_MM_DD_HH_MM);        } catch (Exception e) {            e.printStackTrace();        }        return dateStr;    }    public static Calendar getYesterdayCalendar() {        Calendar cal = Calendar.getInstance();        cal.add(Calendar.DATE, -1);        return cal;    }    /**     * 时间戳转换     *     * @param time     * @return     */    @SuppressLint("SimpleDateFormat")    public static String stampToDate(Long time, String format) {        String res;        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(format);        Date date = new Date(time);        res = simpleDateFormat.format(date);        return res;    }    /**     * 获取时间和地址拼接     *     * @param postTime     * @param pioName     * @return     */    public static String getTimeAddress(long postTime, String pioName) {        String timeAddress;        timeAddress = TimeUtil.formatChatTime4ListOrDetail(Long.toString(postTime), false);        if (!TextUtils.isEmpty(pioName)) {            timeAddress = timeAddress + " · " + pioName;        }        return timeAddress;    }    public static String getData(long data) {        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");        return sdf.format(new Date(data));    }    /**     * 通过秒数转换成时长     *     * @param seconds     * @return     */    public static String formatTimeS(long seconds) {        int temp = 0;        StringBuffer sb = new StringBuffer();        if (seconds > 3600) {            temp = (int) (seconds / 3600);            sb.append((seconds / 3600) < 10 ? "0" + temp + ":" : temp + ":");        }        temp = (int) (seconds % 3600 / 60);        changeSeconds(seconds, temp, sb);        return sb.toString();    }    private static void changeSeconds(long seconds, int temp, StringBuffer sb) {        sb.append((temp < 10) ? "0" + temp + ":" : "" + temp + ":");        temp = (int) (seconds % 3600 % 60);        sb.append((temp < 10) ? "0" + temp : "" + temp);    }    /**     * 格式化日期     *     * @param timeStr     * @return     */    public static String formatDate(long timeStr) {        try {            long timeMillis = timeStr * 1000L;            if (timeMillis == 0) {                return "";            }            Calendar todayCalendar = Calendar.getInstance();            todayCalendar.set(Calendar.HOUR_OF_DAY, 0);            todayCalendar.set(Calendar.MINUTE, 0);            todayCalendar.set(Calendar.MILLISECOND, 0);            long todayMillis = todayCalendar.getTimeInMillis();            if (timeMillis >= todayMillis) {                return StringUtil.getString(R.string.common_today);            }            //昨天            long yesterdayMillis = todayMillis - 24 * 60 * 60 * 1000;            if (timeMillis >= yesterdayMillis) {                return StringUtil.getString(R.string.common_yesterday);            }            return formatLong2Short(timeStr);        } catch (Exception e) {            return "";        }    }    /**     * 计算time2减去time1的差值 差值只设置 几天 几个小时 或 几分钟     * 根据差值返回多长之间前或多长时间后     */    public static long getDistanceTime(long startTime, long endTime) {        long day = 0;        long hour = 0;        long min = 0;        long sec = 0;        long diff;        if (startTime < endTime) {            diff = endTime - startTime;        } else {            diff = startTime - endTime;        }        day = diff / (24 * 60 * 60 * 1000);        hour = (diff / (60 * 60 * 1000) - day * 24);        min = ((diff / (60 * 1000)) - day * 24 * 60 - hour * 60);        sec = (diff / 1000 - day * 24 * 60 * 60 - hour * 60 * 60 - min * 60);       /* if (day != 0) return day + "天" + hour + "小时" + min + "分钟" + sec + "秒";        if (hour != 0) return hour + "小时" + min + "分钟" + sec + "秒";        if (min != 0) return min + "分钟" + sec + "秒";        if (sec != 0) return sec + "秒";*/        return hour;    }    /**     * 计算朋友圈过期时间     * 1.倒计时剩余时间小于1天时，以时钟方式展示：00:00:00(时分秒)     * 2.倒计时剩余时间小于1个月时，以天数展示，如：29days     * 3.倒计时剩余时间大于1个月时，以月份展示，如：2months     */    public static String getExpireTime(long postTime, long expireTime) {        long mon;        long day;        long hour;        long min;        long sec;        long diff;        //createTime + expireDate - 当前时间吧//        diff = Math.abs(expireTime) - (getCurrentTime4Local() * 1000 - postTime * 1000);        diff = (postTime + expireTime - getCurrentTime4Local()) * 1000;        day = diff / (24 * 60 * 60 * 1000);        hour = (diff / (60 * 60 * 1000) - day * 24);        min = ((diff / (60 * 1000)) - day * 24 * 60 - hour * 60);        sec = (diff / 1000 - day * 24 * 60 * 60 - hour * 60 * 60 - min * 60);        mon = day / 30;        String hours;        String mins;        String secs;        if (hour < 10) {            hours = "0" + hour;        } else {            hours = hour + "";        }        if (min < 10) {            mins = "0" + min;        } else {            mins = min + "";        }        if (sec < 10) {            secs = "0" + sec;        } else {            secs = sec + "";        }        if (mon != 0) return mon + "months";        if (day != 0) return day + "days";        if (hour != 0) return hours + ":" + mins + ":" + secs;        if (min != 0) return hours + ":" + mins + ":" + secs;        if (sec != 0) return hours + ":" + mins + ":" + secs;        return "";    }    public static String formatTime(String timeStr) {        try {            long timeMillis = Long.valueOf(timeStr) * 1000L;            if (timeMillis == 0) {                return "";            }            Calendar todayCalendar = Calendar.getInstance();            todayCalendar.set(Calendar.HOUR_OF_DAY, 0);            todayCalendar.set(Calendar.MINUTE, 0);            todayCalendar.set(Calendar.MILLISECOND, 0);            // 今天            long todayMillis = todayCalendar.getTimeInMillis();            if (timeMillis >= todayMillis) {                // Today 02:14                return StringUtil.getString(R.string.common_today) + " " + format(timeStr, HH_MM);            }            // 明天            long tomorrowMillis = todayMillis + 24 * 60 * 60 * 1000;            if (timeMillis <= tomorrowMillis) {                return format(timeStr, FORMAT_MM_DD_YYYY_HH_MM);            }            // 昨天            long yesterdayMillis = todayMillis - 24 * 60 * 60 * 1000;            if (timeMillis >= yesterdayMillis) {                // Yesterday 12:00                return StringUtil.getString(R.string.common_yesterday) + " " + format(timeStr, HH_MM);            }            // 前天            // 27/04/2019 12:00            return format(timeStr, FORMAT_MM_DD_YYYY_HH_MM);        } catch (Exception e) {            return "";        }    }    public static long getUTCMillsTime() {        //获取当前时间UTC        SimpleDateFormat dateFormatGmt = new SimpleDateFormat(YYYY_MM_DD_HH_MM_SS);        dateFormatGmt.setTimeZone(TimeZone.getTimeZone("GMT"));        SimpleDateFormat dateFormatLocal = new SimpleDateFormat(YYYY_MM_DD_HH_MM_SS);        try {            Date currDate = dateFormatLocal.parse(dateFormatGmt.format(new Date()));            if (currDate != null) {                return currDate.getTime();            }        } catch (ParseException e) {            e.printStackTrace();        }        return 0L;    }    public static String zeroZoneTime() {        SimpleDateFormat dateFormat = new SimpleDateFormat(YYYY_MM_DD_HH_MM_SS);        dateFormat.setTimeZone(TimeZone.getTimeZone("GMT"));        return dateFormat.format(new Date());    }    /**     * 获取时间差值 天     *     * @param startTime     * @param endTime     * @return     */    public static long getTimeRange(String startTime, String endTime) {        long rangTime = 0;        SimpleDateFormat formatter = new SimpleDateFormat("yy-MM-dd");        try {            Date startDate = formatter.parse(startTime);            Date endDate = formatter.parse(endTime);            Calendar startCalender = Calendar.getInstance();            startCalender.setTime(startDate);            long startM = startCalender.getTimeInMillis();            Calendar endCalender = Calendar.getInstance();            endCalender.setTime(endDate);            long endM = endCalender.getTimeInMillis();            rangTime = endM - startM;        } catch (ParseException e) {            e.printStackTrace();        }        return rangTime/1000/24/60/60;    }    /**     * 格式化成分秒     *     * @param needFormatTime     * @return     */    @SuppressLint("All")    public static String getFormatMMSS(Long needFormatTime) {        SimpleDateFormat formatter = new SimpleDateFormat(MM_SS);        return formatter.format(needFormatTime);    }    /**     * 两个日期比较大小     *     * @param date1     * @param date2     * @return     */    @SuppressLint("SimpleDateFormat")    public static int compare_date(String date1, String date2) {        DateFormat df = new SimpleDateFormat(YYYY_MM_DD_HH_MM_SS);        try {            Date dt1 = df.parse(date1);            Date dt2 = df.parse(date2);            if (dt1.getTime() > dt2.getTime()) {              //  LogUtil.d("time", "dt1 在dt2前");                return 1;            } else if (dt1.getTime() < dt2.getTime()) {               // LogUtil.d("time", "dt1在dt2后");                return -1;            } else {                return 0;            }        } catch (Exception exception) {            exception.printStackTrace();        }        return 0;    }    /**     * 两个日期相差几天     *     * @param startTime     * @param endTime     * @param format     * @return     */    @SuppressLint("SimpleDateFormat")    public static long dateDiff(String startTime, String endTime, String format) {        // 按照传入的格式生成一个simpledateformate对象        SimpleDateFormat sd = new SimpleDateFormat(format);        long nd = 1000 * 24 * 60 * 60;// 一天的毫秒数        long nh = 1000 * 60 * 60;// 一小时的毫秒数        long nm = 1000 * 60;// 一分钟的毫秒数        long ns = 1000;// 一秒钟的毫秒数        long diff;        long day = 0;        try {// 获得两个时间的毫秒时间差异            diff = sd.parse(endTime).getTime() - sd.parse(startTime).getTime();            day = diff / nd;// 计算差多少天            long hour = diff % nd / nh;// 计算差多少小时            long min = diff % nd % nh / nm;// 计算差多少分钟            long sec = diff % nd % nh % nm / ns;// 计算差多少秒            // 输出结果          //  LogUtil.d("时间相差：" + day + "天" + hour + "小时" + min + "分钟" + sec + "秒。");            if (day >= 1) {                return day;            } else {                if (day == 0) {                    return 1;                } else {                    return 0;                }            }        } catch (ParseException e) {            e.printStackTrace();        }        return 0;    }    public static String getAudioFormatTime(int second) {        SimpleDateFormat sdf = new SimpleDateFormat("mm:ss");        return sdf.format(new Date(second * 1000));    }    public static String getAudioFormatTime(long second) {        SimpleDateFormat sdf = new SimpleDateFormat("mm:ss");        return sdf.format(new Date(second));    }    public static String getAudioHmsFormatTime(long timeMs) {        if (timeMs <= 0 || timeMs >= 24 * 60 * 60 * 1000) {            return "00:00:00";        }        long totalSeconds = timeMs / 1000;        long seconds = totalSeconds % 60;        long minutes = (totalSeconds / 60) % 60;        long hours = totalSeconds / 3600;        StringBuilder stringBuilder = new StringBuilder();        Formatter mFormatter = new Formatter(stringBuilder, Locale.getDefault());        if (hours > 0) {            return mFormatter.format("%d:%02d:%02d", hours, minutes, seconds).toString();        } else {            return "00:" + mFormatter.format("%02d:%02d", minutes, seconds).toString();        }    }}